Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BEGIN
    BOOLEAN
    COMA
    COMMENT
    DECL
    ELSE
    END
    ERROR
    IF
    IGUAL
    MAYOR
    MAYORIGUAL
    MENOR
    MENORIGUAL
    NIGUAL
    NOT
    OR
    PC
    PROG
    STRING

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> ID ASIG expression
Rule 3     statement -> INT ID ASIG expression
Rule 4     expression -> expression SUMA expression
Rule 5     expression -> expression RESTA expression
Rule 6     expression -> expression MULT expression
Rule 7     expression -> expression DIV expression
Rule 8     expression -> RESTA expression
Rule 9     expression -> LPAREN expression RPAREN
Rule 10    expression -> INTEGER
Rule 11    expression -> ID

Terminals, with rules where they appear

AND                  : 
ASIG                 : 2 3
BEGIN                : 
BOOLEAN              : 
COMA                 : 
COMMENT              : 
DECL                 : 
DIV                  : 7
ELSE                 : 
END                  : 
ERROR                : 
ID                   : 2 3 11
IF                   : 
IGUAL                : 
INT                  : 3
INTEGER              : 10
LPAREN               : 9
MAYOR                : 
MAYORIGUAL           : 
MENOR                : 
MENORIGUAL           : 
MULT                 : 6
NIGUAL               : 
NOT                  : 
OR                   : 
PC                   : 
PROG                 : 
RESTA                : 5 8
RPAREN               : 9
STRING               : 
SUMA                 : 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 4 4 5 5 6 6 7 7 8 9
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . ID ASIG expression
    (3) statement -> . INT ID ASIG expression
    (4) expression -> . expression SUMA expression
    (5) expression -> . expression RESTA expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIV expression
    (8) expression -> . RESTA expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INTEGER
    (11) expression -> . ID

    ID              shift and go to state 3
    INT             shift and go to state 4
    RESTA           shift and go to state 5
    LPAREN          shift and go to state 6
    INTEGER         shift and go to state 7

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (4) expression -> expression . SUMA expression
    (5) expression -> expression . RESTA expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIV expression

    $end            reduce using rule 1 (statement -> expression .)
    SUMA            shift and go to state 8
    RESTA           shift and go to state 9
    MULT            shift and go to state 10
    DIV             shift and go to state 11


state 3

    (2) statement -> ID . ASIG expression
    (11) expression -> ID .

    ASIG            shift and go to state 12
    SUMA            reduce using rule 11 (expression -> ID .)
    RESTA           reduce using rule 11 (expression -> ID .)
    MULT            reduce using rule 11 (expression -> ID .)
    DIV             reduce using rule 11 (expression -> ID .)
    $end            reduce using rule 11 (expression -> ID .)


state 4

    (3) statement -> INT . ID ASIG expression

    ID              shift and go to state 13


state 5

    (8) expression -> RESTA . expression
    (4) expression -> . expression SUMA expression
    (5) expression -> . expression RESTA expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIV expression
    (8) expression -> . RESTA expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INTEGER
    (11) expression -> . ID

    RESTA           shift and go to state 5
    LPAREN          shift and go to state 6
    INTEGER         shift and go to state 7
    ID              shift and go to state 15

    expression                     shift and go to state 14

state 6

    (9) expression -> LPAREN . expression RPAREN
    (4) expression -> . expression SUMA expression
    (5) expression -> . expression RESTA expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIV expression
    (8) expression -> . RESTA expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INTEGER
    (11) expression -> . ID

    RESTA           shift and go to state 5
    LPAREN          shift and go to state 6
    INTEGER         shift and go to state 7
    ID              shift and go to state 15

    expression                     shift and go to state 16

state 7

    (10) expression -> INTEGER .

    SUMA            reduce using rule 10 (expression -> INTEGER .)
    RESTA           reduce using rule 10 (expression -> INTEGER .)
    MULT            reduce using rule 10 (expression -> INTEGER .)
    DIV             reduce using rule 10 (expression -> INTEGER .)
    $end            reduce using rule 10 (expression -> INTEGER .)
    RPAREN          reduce using rule 10 (expression -> INTEGER .)


state 8

    (4) expression -> expression SUMA . expression
    (4) expression -> . expression SUMA expression
    (5) expression -> . expression RESTA expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIV expression
    (8) expression -> . RESTA expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INTEGER
    (11) expression -> . ID

    RESTA           shift and go to state 5
    LPAREN          shift and go to state 6
    INTEGER         shift and go to state 7
    ID              shift and go to state 15

    expression                     shift and go to state 17

state 9

    (5) expression -> expression RESTA . expression
    (4) expression -> . expression SUMA expression
    (5) expression -> . expression RESTA expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIV expression
    (8) expression -> . RESTA expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INTEGER
    (11) expression -> . ID

    RESTA           shift and go to state 5
    LPAREN          shift and go to state 6
    INTEGER         shift and go to state 7
    ID              shift and go to state 15

    expression                     shift and go to state 18

state 10

    (6) expression -> expression MULT . expression
    (4) expression -> . expression SUMA expression
    (5) expression -> . expression RESTA expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIV expression
    (8) expression -> . RESTA expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INTEGER
    (11) expression -> . ID

    RESTA           shift and go to state 5
    LPAREN          shift and go to state 6
    INTEGER         shift and go to state 7
    ID              shift and go to state 15

    expression                     shift and go to state 19

state 11

    (7) expression -> expression DIV . expression
    (4) expression -> . expression SUMA expression
    (5) expression -> . expression RESTA expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIV expression
    (8) expression -> . RESTA expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INTEGER
    (11) expression -> . ID

    RESTA           shift and go to state 5
    LPAREN          shift and go to state 6
    INTEGER         shift and go to state 7
    ID              shift and go to state 15

    expression                     shift and go to state 20

state 12

    (2) statement -> ID ASIG . expression
    (4) expression -> . expression SUMA expression
    (5) expression -> . expression RESTA expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIV expression
    (8) expression -> . RESTA expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INTEGER
    (11) expression -> . ID

    RESTA           shift and go to state 5
    LPAREN          shift and go to state 6
    INTEGER         shift and go to state 7
    ID              shift and go to state 15

    expression                     shift and go to state 21

state 13

    (3) statement -> INT ID . ASIG expression

    ASIG            shift and go to state 22


state 14

    (8) expression -> RESTA expression .
    (4) expression -> expression . SUMA expression
    (5) expression -> expression . RESTA expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIV expression

    SUMA            reduce using rule 8 (expression -> RESTA expression .)
    RESTA           reduce using rule 8 (expression -> RESTA expression .)
    MULT            reduce using rule 8 (expression -> RESTA expression .)
    DIV             reduce using rule 8 (expression -> RESTA expression .)
    $end            reduce using rule 8 (expression -> RESTA expression .)
    RPAREN          reduce using rule 8 (expression -> RESTA expression .)

  ! SUMA            [ shift and go to state 8 ]
  ! RESTA           [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIV             [ shift and go to state 11 ]


state 15

    (11) expression -> ID .

    SUMA            reduce using rule 11 (expression -> ID .)
    RESTA           reduce using rule 11 (expression -> ID .)
    MULT            reduce using rule 11 (expression -> ID .)
    DIV             reduce using rule 11 (expression -> ID .)
    $end            reduce using rule 11 (expression -> ID .)
    RPAREN          reduce using rule 11 (expression -> ID .)


state 16

    (9) expression -> LPAREN expression . RPAREN
    (4) expression -> expression . SUMA expression
    (5) expression -> expression . RESTA expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIV expression

    RPAREN          shift and go to state 23
    SUMA            shift and go to state 8
    RESTA           shift and go to state 9
    MULT            shift and go to state 10
    DIV             shift and go to state 11


state 17

    (4) expression -> expression SUMA expression .
    (4) expression -> expression . SUMA expression
    (5) expression -> expression . RESTA expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIV expression

    SUMA            reduce using rule 4 (expression -> expression SUMA expression .)
    RESTA           reduce using rule 4 (expression -> expression SUMA expression .)
    $end            reduce using rule 4 (expression -> expression SUMA expression .)
    RPAREN          reduce using rule 4 (expression -> expression SUMA expression .)
    MULT            shift and go to state 10
    DIV             shift and go to state 11

  ! MULT            [ reduce using rule 4 (expression -> expression SUMA expression .) ]
  ! DIV             [ reduce using rule 4 (expression -> expression SUMA expression .) ]
  ! SUMA            [ shift and go to state 8 ]
  ! RESTA           [ shift and go to state 9 ]


state 18

    (5) expression -> expression RESTA expression .
    (4) expression -> expression . SUMA expression
    (5) expression -> expression . RESTA expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIV expression

    SUMA            reduce using rule 5 (expression -> expression RESTA expression .)
    RESTA           reduce using rule 5 (expression -> expression RESTA expression .)
    $end            reduce using rule 5 (expression -> expression RESTA expression .)
    RPAREN          reduce using rule 5 (expression -> expression RESTA expression .)
    MULT            shift and go to state 10
    DIV             shift and go to state 11

  ! MULT            [ reduce using rule 5 (expression -> expression RESTA expression .) ]
  ! DIV             [ reduce using rule 5 (expression -> expression RESTA expression .) ]
  ! SUMA            [ shift and go to state 8 ]
  ! RESTA           [ shift and go to state 9 ]


state 19

    (6) expression -> expression MULT expression .
    (4) expression -> expression . SUMA expression
    (5) expression -> expression . RESTA expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIV expression

    SUMA            reduce using rule 6 (expression -> expression MULT expression .)
    RESTA           reduce using rule 6 (expression -> expression MULT expression .)
    MULT            reduce using rule 6 (expression -> expression MULT expression .)
    DIV             reduce using rule 6 (expression -> expression MULT expression .)
    $end            reduce using rule 6 (expression -> expression MULT expression .)
    RPAREN          reduce using rule 6 (expression -> expression MULT expression .)

  ! SUMA            [ shift and go to state 8 ]
  ! RESTA           [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIV             [ shift and go to state 11 ]


state 20

    (7) expression -> expression DIV expression .
    (4) expression -> expression . SUMA expression
    (5) expression -> expression . RESTA expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIV expression

    SUMA            reduce using rule 7 (expression -> expression DIV expression .)
    RESTA           reduce using rule 7 (expression -> expression DIV expression .)
    MULT            reduce using rule 7 (expression -> expression DIV expression .)
    DIV             reduce using rule 7 (expression -> expression DIV expression .)
    $end            reduce using rule 7 (expression -> expression DIV expression .)
    RPAREN          reduce using rule 7 (expression -> expression DIV expression .)

  ! SUMA            [ shift and go to state 8 ]
  ! RESTA           [ shift and go to state 9 ]
  ! MULT            [ shift and go to state 10 ]
  ! DIV             [ shift and go to state 11 ]


state 21

    (2) statement -> ID ASIG expression .
    (4) expression -> expression . SUMA expression
    (5) expression -> expression . RESTA expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIV expression

    $end            reduce using rule 2 (statement -> ID ASIG expression .)
    SUMA            shift and go to state 8
    RESTA           shift and go to state 9
    MULT            shift and go to state 10
    DIV             shift and go to state 11


state 22

    (3) statement -> INT ID ASIG . expression
    (4) expression -> . expression SUMA expression
    (5) expression -> . expression RESTA expression
    (6) expression -> . expression MULT expression
    (7) expression -> . expression DIV expression
    (8) expression -> . RESTA expression
    (9) expression -> . LPAREN expression RPAREN
    (10) expression -> . INTEGER
    (11) expression -> . ID

    RESTA           shift and go to state 5
    LPAREN          shift and go to state 6
    INTEGER         shift and go to state 7
    ID              shift and go to state 15

    expression                     shift and go to state 24

state 23

    (9) expression -> LPAREN expression RPAREN .

    SUMA            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RESTA           reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    MULT            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 9 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 9 (expression -> LPAREN expression RPAREN .)


state 24

    (3) statement -> INT ID ASIG expression .
    (4) expression -> expression . SUMA expression
    (5) expression -> expression . RESTA expression
    (6) expression -> expression . MULT expression
    (7) expression -> expression . DIV expression

    $end            reduce using rule 3 (statement -> INT ID ASIG expression .)
    SUMA            shift and go to state 8
    RESTA           shift and go to state 9
    MULT            shift and go to state 10
    DIV             shift and go to state 11

